---
title: "R Packages"
format: html
---

# R Packages for Data Science

Packages in R are collections of functions, data, and compiled code that extend base R capabilities. We will cover installation, loading, essential package ecosystems, and practical examples.

## 1. Installing Packages

### Selecting a CRAN mirror

Before installing, ensure you have a CRAN mirror set. When you first invoke `install.packages()`, R will prompt you to choose a mirror. Select one geographically close to you for speed.

```{r}
# Example: install tidyverse
install.packages("tidyverse")
```

-   **`install.packages("pkg")`** downloads source or binary from CRAN and installs it into your library (use `getwd()` if youâ€™re unsure where your default library is located).

-   To specify a mirror programmatically:

    ``` r
    install.packages("tidyverse", repos = "https://cloud.r-project.org")
    ```

### Updating Packages

```{r}
# Update all installed packages
download.packages(repos = "https://cloud.r-project.org")
# Or use utils function
i <- old.packages()
if (!is.null(i)) update.packages(ask = FALSE)
```

## 2. Loading Packages

Once installed, load a package with `library()` or `require()`:

```{r}
library(tidyverse)  # Loads core tidyverse packages
tidyverse_conflicts()

require(vegan)      # Alternative; returns TRUE if loaded
```

-   **`library(pkg, quietly = TRUE)`** loads without startup messages.
-   **`conflicts()`** lists any masking of functions from different packages.

## 3. Essential Package Ecosystems

### tidyverse

A coherent suite designed for data science by Hadley Wickham and team: - **`dplyr`**: Data manipulation grammar (`filter()`, `select()`, `mutate()`, `summarise()`, `arrange()`). - **`ggplot2`**: Grammar of graphics for plotting. - **`tidyr`**: Tools to reshape (`pivot_longer`, `pivot_wider`). - **`readr`**: High-performance data import (`read_csv`, `read_delim`).

#### tidyverse Example

```{r}
# Import a CSV via readr
# df <- read_csv("path/to/file.csv")

# Using built-in iris dataset as tibble
df <- as_tibble(iris)

# Chain operations with dplyr
df_summary <- df %>%
  filter(Sepal.Length > 5) %>%
  group_by(Species) %>%
  summarise(
    mean_sep = mean(Sepal.Length),
    sd_sep   = sd(Sepal.Length),
    count    = n()
  )

# Display summary
df_summary

# Create a scatter plot with ggplot2
ggplot(df, aes(x = Sepal.Length, y = Petal.Length, colour = Species)) +
  geom_point(alpha = 0.7) +
  labs(title = "Sepal vs Petal Length by Species")
```

### vegan

Community ecology and multivariate statistics: - **`diversity(x, index = "shannon")`**: Shannon diversity index. - **`metaMDS(x, distance = "bray")`**: Non-metric multidimensional scaling. - **`rda(x, y)`**: Redundancy analysis (constrained ordination).

#### vegan Example

```{r}
# Load datasets
library(vegan)
data(dune)
data(dune.env)

# Calculate Shannon diversity by site
div_shannon <- diversity(dune, index = "shannon")
print(div_shannon)

# Perform NMDS ordination
nmds_res <- metaMDS(dune, distance = "bray", k = 2)
plot(nmds_res, type = "n")
text(nmds_res, display = "sites")
```

### Other Noteworthy Packages

-   **sf**: Simple features for spatial vector data. Use `st_read()` to import spatial files.
-   **lubridate**: Simplifies date-time parsing (`ymd()`, `hms()`) and arithmetic.
-   **stringr**: Consistent and user-friendly string manipulation (`str_detect`, `str_replace`).
-   **purrr**: Functional programming tools to iterate (`map`, `map_df`).

#### Example: Loading and using `sf`

```{r}
# Install if needed
# install.packages("sf")

library(sf)
# Read a shapefile (replace with your own path)
# shapefile <- st_read("data/your_shapefile.shp")
# Print geometry summary
# print(shapefile)
```
