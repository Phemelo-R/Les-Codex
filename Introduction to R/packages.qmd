---
title: "Key R Packages"
format: html
toc: true
---

# Key R Packages for Data Science

R’s power lies in its rich package ecosystem. In this lesson you will learn how to:

1.  Install and load packages\
2.  Navigate the **tidyverse** meta-package and its components\
3.  Use **vegan** for ecological analyses\
4.  Explore several other essential packages

All examples assume you have installed and loaded the packages as shown below.

------------------------------------------------------------------------

## 1. Installing Packages

```{r eval=FALSE}
# Install core data-science packages from CRAN 
install.packages("tidyverse") # includes ggplot2, dplyr, tidyr, readr, purrr, etc. 
install.packages("vegan", repos = "https://cloud.r-project.org") 
install.packages("sf", repos = "https://cloud.r-project.org") 
install.packages("lubridate") 
install.packages("stringr") 
install.packages("purrr")
```

**Tip:** Run these commands interactively in your console. To avoid mirror prompts, specify `repos = "https://cloud.r-project.org"`.

------------------------------------------------------------------------

## 2. Loading Packages

```{r include=FALSE}

library(tidyverse)   # core tools for data manipulation & visualization
library(vegan)       # community ecology and multivariate methods
library(sf)          # simple features for spatial data
library(lubridate)   # date-time parsing and arithmetic
library(stringr)     # string operations
library(purrr)       # functional programming tools
```

-   Use `library(pkg, quietly = TRUE)` to suppress startup messages.

-   `conflicts()` shows any function name clashes.

------------------------------------------------------------------------

## 3. The **tidyverse** Ecosystem

**tidyverse** is a coherent suite by Hadley Wickham & team. It shares a uniform syntax and philosophy:

### 3.1 dplyr

A grammar for data manipulation:

-   `filter(df, condition)`

-   `select(df, cols)`

-   `mutate(df, new = expr)`

-   `arrange(df, cols)`

-   `summarise(df, agg = func(col))`

```{r}

# Example: summarise mtcars by cyl
df <- as_tibble(mtcars)
df %>% 
  group_by(cyl) %>%
  summarise(
    avg_mpg = mean(mpg),
    max_hp  = max(hp),
    n       = n()
  )
```

### 3.2 ggplot2

A layered grammar of graphics:

-   `ggplot(data, aes(x, y, ...))`

-   `geom_point()`, `geom_line()`, `geom_histogram()`

-   `labs()`, `theme_*()`

```{r}

ggplot(df, aes(x = factor(cyl), y = mpg)) +
  geom_col(fill = "steelblue") +
  labs(
    title = "MPG by Cylinder Count",
    x     = "Cylinders",
    y     = "MPG"
  )
```

### 3.3 tidyr

Tools to tidy data:

-   `pivot_longer(df, cols, names_to, values_to)`

-   `pivot_wider(df, names_from, values_from)`

```{r}

# Convert mtcars summary to long form
long_df <- df %>%
  pivot_longer(
    cols = c(mpg, hp),
    names_to  = "metric",
    values_to = "value"
  )
head(long_df)
```

### 3.4 readr

Fast data import:

-   `read_csv("file.csv")`

-   `read_delim("file.txt", delim = "\t")`

```{r eval=FALSE}

# Example: df2 <- read_csv("data/mydata.csv")
```

### 3.5 purrr

Functional programming:

-   `map(df, f)` applies `f` to each column

-   `map_df(list_of_dfs, bind_rows)` combines multiple data frames

```{r}

# Example: compute mean of each numeric column
map_dbl(df, ~ if(is.numeric(.x)) mean(.x) else NA_real_)
```

------------------------------------------------------------------------

## 4. The **vegan** Package

Specialised for community ecology:

-   `diversity(x, index = "shannon")` – Shannon diversity index

-   `metaMDS(x, distance = "bray", k = 2)` – non-metric MDS ordination

-   `rda(x, y)` – redundancy analysis (constrained ordination)

```{r}

# Example using dune dataset
data(dune)
div_shannon <- diversity(dune, index = "shannon")
meta  <- metaMDS(dune, distance = "bray", k = 2)
plot(meta, type = "n"); text(meta, display = "sites")
```

------------------------------------------------------------------------

## 5. Other Essential Packages

### sf (Simple Features)

Handles spatial vector data:

```{r}

# sf::st_read("path/to/shapefile.shp")
```

### lubridate

Simplifies date-time work:

-   `ymd("2022-01-15")`, `hms("12:30:45")`

-   `today()`, `now()`, `year()`, `month()`, `day()`

```{r}

d <- ymd("2025-05-14")
year(d); month(d); wday(d, label = TRUE)
```

### stringr

Consistent string manipulation:

-   `str_detect(string, pattern)`

-   `str_replace(string, pattern, replacement)`

```{r}

words <- c("data", "science", "analysis")
str_detect(words, "a")    # TRUE, TRUE, FALSE
```

### purrr

(see above) for advanced iteration.

------------------------------------------------------------------------

By the end of this lesson you should understand the core tidyverse packages, how to manipulate, visualise, and model data, and where to go next for specialised analyses. Proceed to the **Error Bypass Atlas** or return to **Introduction to R**.
